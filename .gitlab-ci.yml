# The deploy stage copies the exe and msi from build stage to a network drive
# You need to have the network drive mapped as Local System user for gitlab-runner service to see it
# The best way to persist the mapping is via a scheduled task
# running the following batch command: net use P: \\x.x.x.x\Projects /u:your_user your_pass /persistent:yes

variables:
    PACKAGES_DIR: ..\.nuget
    SOLUTION_FILE: src\AztecDateTranslator.slnx
    RELEASE_DIR: src\AztecDateTranslator.Console\bin\Release\net9.0\
    CONSOLE_TAR: console.tar.xz
stages:
  - build
  #- test
  #- deploy

build_job:
  stage: build
  tags:
    - windows
  script:
    - dotnet clean -c Release --verbosity=minimal $SOLUTION_FILE
    - dotnet build -c Release --packages $PACKAGES_DIR $SOLUTION_FILE
    - tar cvJf $CONSOLE_TAR $RELEASE_DIR
  artifacts:
    expire_in: 1 week  # save gitlab server space, we copy the files we need to deploy folder later on
    paths:
      - $CONSOLE_TAR
    #   - '$env:EXE_RELEASE_FOLDER\YourApp.exe'  # saving exe to copy to deploy folder
    #   - '$env:MSI_RELEASE_FOLDER\YourApp Setup.msi'  # saving msi to copy to deploy folder
    #   - '$env:TEST_FOLDER\'  # saving entire Test project so NUnit can run tests

# test_job:
#   stage: test
#   only:
#     - tags
#   script:
#     - '& "$env:NUNIT_PATH" ".\$env:TEST_FOLDER\Tests.dll"'  # running NUnit tests
#   artifacts:
#     when: always  # save test results even when the task fails
#     expire_in: 1 week  # save gitlab server space, we copy the files we need to deploy folder later on
#     paths:
#       - '.\TestResult.xml'  # saving NUnit results to copy to deploy folder
#   dependencies:
#     - build_job

# deploy_job:
#   stage: deploy
#   only:
#     - tags
#   script:
#     # Compose a folder for each release based on commit tag.
#     # Assuming your tag is Rev1.0.0.1, and your last commit message is 'First commit'
#     # the artifact files will be copied to:
#     # P:\Projects\YourApp\Builds\Rev1.0.0.1 - First commit\
#     - '$commitSubject = git log -1 --pretty=%s'
#     - '$deployFolder = $($env:DEPLOY_FOLDER) + "\" + $($env:CI_COMMIT_TAG) + " - " + $commitSubject + "\"'

#     # xcopy takes care of recursively creating required folders
#     - 'xcopy /y ".\$env:EXE_RELEASE_FOLDER\YourApp.exe" "$deployFolder"'
#     - 'xcopy /y ".\$env:MSI_RELEASE_FOLDER\YourApp Setup.msi" "$deployFolder"'
#     - 'xcopy /y ".\TestResult.xml" "$deployFolder"'
#   dependencies:
#     - build_job
#     - test_job
#   environment: production
